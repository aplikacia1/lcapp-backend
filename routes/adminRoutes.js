const express = require('express');
const router = express.Router();
const bcrypt = require('bcrypt');
const Admin = require('../models/adminModel'); // ‚úÖ nech√°me tak
const User = require('../models/User'); // ‚úÖ OPRAVEN√â ‚Äì spr√°vny n√°zov s√∫boru

// Prihl√°senie admina
router.post('/login', async (req, res) => {
  const { email, password } = req.body;

  try {
    const admin = await Admin.findOne({ email });

    if (!admin) {
      return res.status(404).json({ message: 'Admin neexistuje' });
    }

    const isMatch = await bcrypt.compare(password, admin.passwordHash);
    if (!isMatch) {
      return res.status(401).json({ message: 'Nespr√°vne heslo' });
    }

    res.json({ message: 'Prihl√°senie √∫spe≈°n√©' });
  } catch (error) {
    console.error('Chyba pri prihlasovan√≠:', error);
    res.status(500).json({ message: 'Chyba servera' });
  }
});

// Zmena hesla admina
router.put('/password', async (req, res) => {
  const { currentPassword, newPassword } = req.body;

  try {
    const admin = await Admin.findOne({ email: process.env.ADMIN_EMAIL || 'bratislava@listovecentrum.sk' });

    if (!admin) {
      return res.status(404).json({ message: 'Admin neexistuje' });
    }

    const isMatch = await bcrypt.compare(currentPassword, admin.passwordHash);
    if (!isMatch) {
      return res.status(401).json({ message: 'Nespr√°vne aktu√°lne heslo' });
    }

    const hashedPassword = await bcrypt.hash(newPassword, 10);
    admin.passwordHash = hashedPassword;
    await admin.save();

    res.json({ message: 'Heslo √∫spe≈°ne zmenen√©' });
  } catch (error) {
    console.error('Chyba pri zmene hesla:', error);
    res.status(500).json({ message: 'Chyba servera pri zmene hesla' });
  }
});

// üÜï Z√çSKANIE V≈†ETK√ùCH POU≈Ω√çVATEƒΩOV
router.get('/users', async (req, res) => {
  try {
    const users = await User.find();
    res.json(users);
  } catch (error) {
    console.error('Chyba pri naƒç√≠tan√≠ pou≈æ√≠vateƒæov:', error);
    res.status(500).json({ message: 'Chyba servera pri z√≠skavan√≠ pou≈æ√≠vateƒæov' });
  }
});

// üÜï POƒåET PRIHL√ÅSEN√ùCH ‚Äì podƒæa session (len orientaƒçne)
router.get('/online', async (req, res) => {
  try {
    const sessionCount = Object.keys(req.app.get('sessions') || {}).length;
    res.json({ count: sessionCount });
  } catch (error) {
    console.error('Chyba pri zis≈•ovan√≠ online:', error);
    res.json({ count: 0 });
  }
});

module.exports = router;
